---
version: 2.1

orbs:
  terraform: feedyard/terraform@0.6.0

executors:
  infra-image:
    docker:
      - image: twdps/di-circleci-infra-image:stable
    shell: secrethub run -- /bin/sh -eo pipefail
      
on-push-master: &on-push-master
  branches:
    only: /master/
  tags:
    ignore: /.*/

# on-tag-master: &on-tag-master
#   branches:
#     ignore: /.*/
#   tags:
#     only: /.*/

commands:

  set-environment:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: ""
    steps:
      - run:
          name: set environment tfvars and cert-manager files
          command: |
            secrethub inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json
            secrethub inject -i environments/<< parameters.cluster >>.cert-manager.json.tpl -o << parameters.cluster >>.cert-manager.json
      - run:
          name: pull kubeconfig
          command: |
            mkdir ~/.kube
            SECRETHUB_VAR_ENV=<< parameters.cluster >> secrethub inject -i tpl/kubeconfig.tpl -o ~/.kube/config

  deploy-istio:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: ""
    steps:
      - run: 
          name: install the istioctl version matching the version in cluster.json
          command: bash scripts/install_istioctl_by_version.sh << parameters.cluster >>
      - run:
          name: deploy istio operator and matching version manifest
          command: bash scripts/deploy_istio.sh << parameters.cluster >>
      - run:
          name: validate istio deployment
          command: CLUSTER=<< parameters.cluster >> bats test/validate_istio.bats

  deploy-external-dns:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: ""
    steps:
      - run:
          name: deploy external-dns
          command: bash scripts/deploy_external_dns.sh << parameters.cluster >>
      - run:
          name: validate external-dns deployment
          command: CLUSTER=<< parameters.cluster >> bats test/validate_external_dns.bats

  deploy-cert-manager:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: ""
    steps:
      - run:
          name: deploy cert-manager
          command: bash scripts/deploy_cert-manager.sh << parameters.cluster >>
      - run:
          name: deploy cluster certificate issuer
          command: bash scriprts/deploy_cert_issuer.sh << parameters.cluster >>
      - run:
          name: validate cert-manager deployment
          command: CLUSTER=<< parameters.cluster >> bats test/validate_cert_manager.bats


      - run:
          name: deploy default namespace and environment gateways
          command: |
            kubectl apply -f default-<< parameters.cluster >>-namespaces.yaml
            kubectl apply -f default-<< parameters.cluster >>-gateways
      # - run:
      #     name: deploy httpbin and validate
      #     command: bash tpl/deploy_httpbin.sh << parameters.cluster >>
      # - run:
      #     name: test httpbin traffic
      #     command: CLUSTER=<< parameters.cluster >> bats test/platform_httpbin.bats
      # - run:
      #     name: deploy default istio gateways
      #     command: bash tpl/deploy_istio_gateways.sh << parameters.cluster >>

      # - run:
      #     name: test traffic management
      #     command: CLUSTER=<< parameters.cluster >> bats test/platform_traffic_management.bats
      # - run:
      #     name: deploy certificates
      #     command: bash tpl/deploy_certificates.sh << parameters.cluster >>
deploy-default-environments:
  parameters:
    cluster:
      description: target kubernetes cluster
      type: string
      default: ""
  steps:
    - run:
        name: deploy default namespaces
        command: kubectl apply -f tpl/default-<< parameters.cluster >>-namespaces.yaml
    - run:
        name: deploy default certificates
        command:
    - run:
        name: deploy default gateways
        command: |
          bash scripts/deploy_default_gateways.sh << parameters.cluster >>
          kubectl apply -f tpl/preview-gateways.yaml

deploy-istio-integrations:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: ""
    steps:
      - run:
          name: deploy quickstart prometheus matching istio version
          command: bash scripts/deploy_prometheus.sh << parameters.cluster >>
      - run:
          name: deploy quickstart grafana matching istio version
          command: bash scripts/deploy_grafana.sh << parameters.cluster >>
      - run:
          name: deploy quickstart jaeger matching istio version
          command: bash scripts/deploy_jaeger.sh << parameters.cluster >>
      - run:
          name: deploy current release version of kiali
          command: bash scripts/deploy_kiali.sh << parameters.cluster >>
      - run:
          name: validate istio deployment
          command: CLUSTER=<< parameters.cluster >> bats test/validate_istio_integrations.bats

jobs:
  deploy-servicemesh:
    executor: infra-image
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: ""
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
      - deploy-istio:
          cluster: << parameters.cluster >>
      - deploy-external-dns:
          cluster: << parameters.cluster >>
      - deploy-cert-manager:
          cluster: << parameters.cluster >>
      - deploy-default-environments:
      - deploy-istio-integrations:
          cluster: << parameters.cluster >>

workflows:
  version: 2

  poc-platform-servicemesh-pipeline:
    jobs:
      - terraform/apply:
          name: apply-sandbox-roles
          context: twdps-di
          shell: secrethub run --env-file secrethub.nonprod.env -- /bin/sh -eo pipefail
          workspace: sandbox
          filters: *on-push-master

      - deploy-servicemesh:
          name: deploy-sandbox-servicemesh
          context: twdps-di
          cluster: sandbox
          requires:
            - apply-sandbox-roles
          filters: *on-push-master
