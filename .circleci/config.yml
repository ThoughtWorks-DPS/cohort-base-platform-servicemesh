---
version: 2.1

orbs:
  terraform: feedyard/terraform@0.6.0

executors:
  infra-image:
    docker:
      - image: twdps/di-circleci-infra-image:stable
    shell: secrethub run -- /bin/sh -eo pipefail
      
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: $CLUSTER
    steps:
      - run:
          name: write << parameters.cluster >>.auto.tfvars.json from template
          command: secrethub inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json
      - run:
          name: write << parameters.cluster >>.json from template
          command: secrethub inject -i environments/<< parameters.cluster >>.json.tpl -o << parameters.cluster >>.json
      - run:
          name: set ~/.terraformrc
          command: secrethub inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: pull kubeconfig
          command: |
            mkdir -p ~/.kube
            SECRETHUB_VAR_ENV=<< parameters.cluster >> secrethub inject -i tpl/kubeconfig.tpl -o ~/.kube/config

  deploy-servicemesh-components:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: $CLUSTER
    steps:
      - run: 
          name: install the istioctl version matching the version in << parameters.cluster >>.json
          command: bash scripts/install_istioctl_by_version.sh << parameters.cluster >>
      - run:
          name: deploy istio operator and matching version manifest
          command: bash scripts/deploy_istio.sh << parameters.cluster >>
      - run:
          name: deploy external-dns
          command: bash scripts/deploy_external_dns.sh << parameters.cluster >>
      - run:
          name: deploy cert-manager
          command: bash scripts/deploy_cert_manager.sh << parameters.cluster >>
      - run:
          name: deploy cluster certificate issuer
          command: bash scripts/deploy_cert_issuer.sh << parameters.cluster >>
      - run:
          name: deploy default cluster environment gateways and certificates
          command: bash scripts/deploy_default_gateways.sh << parameters.cluster >>
      - run:
          name: deploy default cluster mtls namespace
          command: kubectl apply -f tpl/default-mtls-namespace.yaml

  deploy-mesh-tools:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: $CLUSTER
    steps:
      - run:
          name: deploy istio-prometheus
          command: bash scripts/deploy_prometheus.sh << parameters.cluster >>
      - run:
          name: deploy istio-grafana
          command: bash scripts/deploy_grafana.sh << parameters.cluster >>
      - run:
          name: deploy all-in-one jaeger
          command: bash scripts/deploy_jaeger.sh << parameters.cluster >>
      - run:
          name: deploy kiali
          command: bash scripts/deploy_kiali.sh << parameters.cluster >>

  validate-servicemesh:
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: $CLUSTER
    steps:
      - run:
          name: validate istio deployment
          command: CLUSTER=<< parameters.cluster >> bats test/validate_istio.bats
      - run:
          name: validate external-dns deployment
          command: CLUSTER=<< parameters.cluster >> bats test/validate_external_dns.bats
      - run:
          name: validate cert-manager deployment
          command: CLUSTER=<< parameters.cluster >> bats test/validate_cert_manager.bats
      - run:
          name: validate default ingress and certificates
          command: bash scripts/validate_ingress.sh << parameters.cluster >>
      - run:
          name: validate mesh tools
          command: CLUSTER=<< parameters.cluster >> bats test/validate_mesh_tools.bats
  
jobs:
  deploy-servicemesh:
    executor: infra-image
    shell: secrethub run --env-file secrethub.nonprod.env -- /bin/sh -eo pipefail
    parameters:
      cluster:
        description: target kubernetes cluster
        type: string
        default: ""
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
      - deploy-servicemesh-components:
          cluster: << parameters.cluster >>
      - deploy-mesh-tools:
          cluster: << parameters.cluster >>
      - validate-servicemesh:
          cluster: << parameters.cluster >>
      

workflows:
  version: 2

  lab-platform-servicemesh-pipeline:
    jobs:
      - terraform/apply:
          name: apply-sandbox-roles
          context: twdps-di
          shell: secrethub run --env-file secrethub.nonprod.env -- /bin/sh -eo pipefail
          workspace: sandbox
          before-terraform:
            - set-environment:
                cluster: sandbox
          filters: *on-push-main

      - deploy-servicemesh:
          name: deploy-sandbox-servicemesh
          context: twdps-di
          cluster: sandbox
          requires:
            - apply-sandbox-roles
          filters: *on-push-main
      
      # release to preview
      - terraform/apply:
          name: apply-preview-roles
          context: twdps-di
          shell: secrethub run --env-file secrethub.nonprod.env -- /bin/sh -eo pipefail
          workspace: preview
          before-terraform:
            - set-environment:
                cluster: preview
          filters: *on-tag-main

      - deploy-servicemesh:
          name: deploy-preview-servicemesh
          context: twdps-di
          cluster: preview
          requires:
            - apply-preview-roles
          filters: *on-tag-main
